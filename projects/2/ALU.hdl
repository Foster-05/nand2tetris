// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //Create full true/false strings from z with the opposite value
    RepeatInverse(a=zx, out=notzx);
    RepeatInverse(a=zy, out=notzy);

    //Compare with zeroing values (b=0 out=0)
    And16(a=x, b=notzx, out=xnew);
    And16(a=y, b=notzy, out=ynew);
    //Done with zeroing

    //XOR nx and x to flip if nx 1 and not if 0
    Xor16(a=xnew, b=nx, out=xnew2);
    Xor16(a=ynew, b=ny, out=ynew2);
    //Done with negating

    //Bitwise And together
    And16(a=xnew2, b=ynew2, out=tmp01);
    Not(in=f, out=tmp02);
    //If f=0 (calculated above), output to xyand
    And116(a=tmp01, b=tmp02, out=xyand1);

    //Calculate 2s complement addition
    Add16(a=xnew2, b=ynew2, out=tmp03);
    //If f=1, output to xyand
    And116(a=tmp03, b=f, out=xyand2);
    //Only one xyand should be valued, or them to output the one that is
    Or16(a=xyand1, b=xyand2, out=xyand);
    
    
    //Calculate bitwise not of current output
    Not16(in=xyand, out=xynot);
    //Output the not-ed value if no=1
    And116(a=xynot, b=no, out=notout);
    //Output the older value if no=0
    Not(in=no, out=tmp04);
    And116(a=xyand, b=tmp04, out=yesout);

    //Only one of notout or yesout should be valued.
    //Or the two together to have one output of the one that is valued
    Or16(a=notout, b=yesout, out=finalout);
    //And with 1 to get a copy to output
    And16(a=finalout, b=true, out=out);
    
    //Calculate ng: compare MSB to a binary 1
    IsNegative(a=finalout, out=ng);

    //Calculate zr: Or all values together and with false, then NOT
    IsEmpty(a=finalout, out=zr);
    
}